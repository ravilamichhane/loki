package {{.PackageName  }}

import (
	"{{.RootPackage}}/dtos"
	"log"
	"nest/common"
	"nest/thor"
)

type {{.PackageName | ToCapitalize }}Controller struct {
	{{.PackageName | ToCapitalize }}Service {{.PackageName | ToCapitalize }}Service
}

func New{{.PackageName | ToCapitalize }}Controller({{.PackageName | ToCapitalize }}Service {{.PackageName | ToCapitalize }}Service) *{{.PackageName | ToCapitalize }}Controller {
	return &{{.PackageName | ToCapitalize }}Controller{
		{{.PackageName | ToCapitalize }}Service: {{.PackageName | ToCapitalize }}Service,
	}
}

func (u *{{.PackageName | ToCapitalize }}Controller) Routes() []common.Route {
	return []common.Route{
		common.GET("/", u.FindAll),
		common.GET("/{id}", u.FindOne),
		common.POST("", u.Create),
		common.PUT("/{id}", u.Update),
		common.DELETE("/{id}", u.Delete),
	}
}

func (u *{{.PackageName | ToCapitalize }}Controller) FindAll(ctx common.HttpContext) error {
	ctx.SetStatusCode(200)

	{{.PackageName }}s, err := u.{{.PackageName | ToCapitalize }}Service.FindAll()

	if err != nil {
		return err
	}

	ctx.JSON(200, {{.PackageName }}s)
	return nil
}

func (u *{{.PackageName | ToCapitalize }}Controller) FindOne(ctx common.HttpContext) error {
	uid, err := ctx.GetUUIDParam("id")

	if err != nil {
		return err
	}

	{{.PackageName }}, err := u.{{.PackageName | ToCapitalize }}Service.FindOne(uid)

	if err != nil {
		return err
	}

	ctx.SetStatusCode(200)

	ctx.JSON(200, {{.PackageName }})
	return nil
}

func (u *{{.PackageName | ToCapitalize }}Controller) Create(ctx common.HttpContext) error {
	var {{.PackageName }} dtos.Create{{.PackageName | ToCapitalize }}

	if err := ctx.Decode(&{{.PackageName }}); err != nil {
		val, ok := err.(thor.FieldErrors)
		log.Println(val, ok, "Error Decoding {{.PackageName | ToCapitalize }}")
		return err
	}

	new{{.PackageName | ToCapitalize }} := {{.PackageName }}.To{{.PackageName | ToCapitalize }}()

	if err := u.{{.PackageName | ToCapitalize }}Service.Create(new{{.PackageName | ToCapitalize }}); err != nil {
		return err
	}

	ctx.JSON(200, new{{.PackageName | ToCapitalize }})
	return nil

}

func (u *{{.PackageName | ToCapitalize }}Controller) Update(ctx common.HttpContext) error {
	uid, err := ctx.GetUUIDParam("id")

	if err != nil {
		return err
	}

	{{.PackageName}}, err := u.{{.PackageName | ToCapitalize }}Service.FindOne(uid)

	if err != nil {
		return err
	}

	var update{{.PackageName | ToCapitalize }} dtos.Update{{.PackageName | ToCapitalize }}

	if err := ctx.Decode(&update{{.PackageName | ToCapitalize }}); err != nil {
		return err
	}
	 update{{.PackageName | ToCapitalize }}.Decode({{.PackageName }})

	if err = u.{{.PackageName | ToCapitalize }}Service.Update({{.PackageName }}); err != nil {
		return err
	}

	ctx.JSON(200, {{.PackageName  }})
	return nil
}

func (u *{{.PackageName | ToCapitalize }}Controller) Delete(ctx common.HttpContext) error {
	uid, err := ctx.GetUUIDParam("id")

	if err != nil {
		return err
	}
	err = u.{{.PackageName | ToCapitalize }}Service.Delete(uid)

	if err == nil {
		ctx.JSON(200, struct {
			Message string `json:"message"`
		}{
			Message: "{{.PackageName | ToCapitalize }} Deleted",
		})
	}

	return err

}

func (u *{{.PackageName | ToCapitalize }}Controller) Prefix() string {
	return "/api/v1/{{.PackageName }}"
}

func (u *{{.PackageName | ToCapitalize }}Controller) Middlewares() []common.MiddleWare {
	return []common.MiddleWare{
		thor.LoggingMiddleware,
		thor.ErrorMiddleware,
		thor.PanicMiddleWare,
	}
}

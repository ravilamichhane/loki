package {{.PackageName }}

import (
	"{{.RootPackage}}/entities"

	"github.com/google/uuid"

	"gorm.io/gorm"
)

type {{.PackageName | ToCapitalize }}Service interface {
	FindAll() ([]entities.{{.PackageName | ToCapitalize }}, error)
	FindOne(id uuid.UUID) (*entities.{{.PackageName | ToCapitalize }}, error)
	Create({{.PackageName | ToCapitalize }} *entities.{{.PackageName | ToCapitalize }}) error
	Update({{.PackageName | ToCapitalize }} *entities.{{.PackageName | ToCapitalize }}) error
	Delete(id uuid.UUID) error
}

type {{.PackageName | ToCapitalize }}ServiceDB struct {
	db *gorm.DB
}

func New{{.PackageName | ToCapitalize }}ServiceDB(db *gorm.DB) {{.PackageName | ToCapitalize }}Service {
	return &{{.PackageName | ToCapitalize }}ServiceDB{db: db}

}

func (u *{{.PackageName | ToCapitalize }}ServiceDB) FindOne(id uuid.UUID) (*entities.{{.PackageName | ToCapitalize }}, error) {
	{{.PackageName }} := &entities.{{.PackageName | ToCapitalize }}{}
	if err := u.db.First({{.PackageName }}, id).Error; err != nil {
		return nil, err
	}
	return {{.PackageName }}, nil
}

func (u *{{.PackageName | ToCapitalize }}ServiceDB) FindAll() ([]entities.{{.PackageName | ToCapitalize }}, error) {
	var {{.PackageName }}s []entities.{{.PackageName | ToCapitalize }}
	if err := u.db.Find(&{{.PackageName }}s).Error; err != nil {
		return nil, err
	}
	return {{.PackageName }}s, nil
}

func (u *{{.PackageName | ToCapitalize }}ServiceDB) Create({{.PackageName  }} *entities.{{.PackageName | ToCapitalize }}) error {
	return u.db.Create(&{{.PackageName  }}).Error
}

func (u *{{.PackageName | ToCapitalize }}ServiceDB) Update({{.PackageName  }} *entities.{{.PackageName | ToCapitalize }}) error {
	return u.db.Save({{.PackageName  }}).Error
}

func (u *{{.PackageName | ToCapitalize }}ServiceDB) Delete(id uuid.UUID) error {
	return u.db.Delete(&entities.{{.PackageName | ToCapitalize }}{}, id).Error
}

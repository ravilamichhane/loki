// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: iam/authorisation/authorisation.proto

package authorisation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthorisationService_IsAuthenticated_FullMethodName = "/authorisation.AuthorisationService/IsAuthenticated"
)

// AuthorisationServiceClient is the client API for AuthorisationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorisationServiceClient interface {
	IsAuthenticated(ctx context.Context, in *AuthorisationRequest, opts ...grpc.CallOption) (*AuthorisationResponse, error)
}

type authorisationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorisationServiceClient(cc grpc.ClientConnInterface) AuthorisationServiceClient {
	return &authorisationServiceClient{cc}
}

func (c *authorisationServiceClient) IsAuthenticated(ctx context.Context, in *AuthorisationRequest, opts ...grpc.CallOption) (*AuthorisationResponse, error) {
	out := new(AuthorisationResponse)
	err := c.cc.Invoke(ctx, AuthorisationService_IsAuthenticated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorisationServiceServer is the server API for AuthorisationService service.
// All implementations must embed UnimplementedAuthorisationServiceServer
// for forward compatibility
type AuthorisationServiceServer interface {
	IsAuthenticated(context.Context, *AuthorisationRequest) (*AuthorisationResponse, error)
	mustEmbedUnimplementedAuthorisationServiceServer()
}

// UnimplementedAuthorisationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorisationServiceServer struct {
}

func (UnimplementedAuthorisationServiceServer) IsAuthenticated(context.Context, *AuthorisationRequest) (*AuthorisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthenticated not implemented")
}
func (UnimplementedAuthorisationServiceServer) mustEmbedUnimplementedAuthorisationServiceServer() {}

// UnsafeAuthorisationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorisationServiceServer will
// result in compilation errors.
type UnsafeAuthorisationServiceServer interface {
	mustEmbedUnimplementedAuthorisationServiceServer()
}

func RegisterAuthorisationServiceServer(s grpc.ServiceRegistrar, srv AuthorisationServiceServer) {
	s.RegisterService(&AuthorisationService_ServiceDesc, srv)
}

func _AuthorisationService_IsAuthenticated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorisationServiceServer).IsAuthenticated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorisationService_IsAuthenticated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorisationServiceServer).IsAuthenticated(ctx, req.(*AuthorisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorisationService_ServiceDesc is the grpc.ServiceDesc for AuthorisationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorisationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authorisation.AuthorisationService",
	HandlerType: (*AuthorisationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAuthenticated",
			Handler:    _AuthorisationService_IsAuthenticated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam/authorisation/authorisation.proto",
}
